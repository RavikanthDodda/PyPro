%--------------------------------------------------------------------------------
commands(t_command(X,Y)) --> command(X), commands(Y).
commands(X) --> command(X).

%command(X) --> block(X).
command(t_command_assign(Y)) --> assign(Y), [;].
command(t_command_while(X,Y)) --> 
    [while], boolean(X), ['{'], commands(Y), ['}'].

command(t_command_if(X,Y)) --> 
    [if], boolean(X), ['{'], commands(Y), ['}'].
command(t_command_ifel(X,Y,Z)) --> 
    [if], boolean(X), ['{'], commands(Y), ['}'], command_el(Z).

command(t_command_for_range(X,Y,Z,T))--> 
    [for], word(X), [in], [range],['('],expr(Y),expr(Z),[')'],['{'],commands(T),['}'].
command(t_command_for(X,Y,Z,T)) --> 
    [for], ['('],commands(X),[;],boolean(Y),[;],expr(Z),[')'],['{'],commands(T),['}'].

command_el(t_command_el(X,Y)) --> 
    [elif], boolean(X), ['{'], commands(Y), ['}'].
command_el(t_command_el(X,Y,Z)) --> 
    [elif], boolean(X), ['{'], commands(Y), ['}'], command_el(Z). 
command_el(t_command_else(Y)) --> 
    [else], ['{'], commands(Y), ['}'].


% change declaration for,eval_command(P,[],0,S)).

eval_command(t_command_assign(X),Env,Scope,NewEnv) :- 
    eval_expr(X,Env,Scope,_Val,NewEnv).

eval_command(t_command(X,Y),Env,Scope,NewEnv) :- 
    eval_command(X,Env,Scope,NewEnv1), eval_command(Y,NewEnv1,Scope,NewEnv).

eval_command(t_command_if(X,Y),Env,Scope,NewEnv) :- 
    eval_boolean(X,Env,Scope,NewEnv1,true), eval_command(Y,NewEnv1,Scope,NewEnv). 

eval_command(t_command_ifel(X,Y,_Z),Env,Scope,NewEnv) :- 
    eval_boolean(X,Env,Scope,NewEnv1,true), eval_command(Y,NewEnv1,Scope,NewEnv). 
eval_command(t_command_ifel(X,_Y,Z),Env,Scope,NewEnv) :- 
    eval_boolean(X,Env,Scope,NewEnv1,false),eval_command(Z,NewEnv1,Scope,NewEnv).

eval_command(t_command_el(X,Y,_Z),Env,Scope,NewEnv) :- 
    eval_boolean(X,Env,Scope,NewEnv1,true), eval_command(Y,NewEnv1,Scope,NewEnv). 
eval_command(t_command_el(X,_Y,Z),Env,Scope,NewEnv) :- 
    eval_boolean(X,Env,Scope,NewEnv1,false),eval_command(Z,NewEnv1,Scope,NewEnv).

eval_command(t_command_else(X),Env,Scope,NewEnv) :- 
   	eval_command(X,Env,Scope,NewEnv).

eval_command(t_command_while(X,Y),Env,Scope,NewEnv) :-  
    eval_boolean(X,Env,Scope,NewEnv1,true),eval_command(Y,NewEnv1,Scope,NewEnv2),
    eval_command(t_command_while(X,Y),NewEnv2,Scope,NewEnv).
eval_command(t_command_while(X,_Y),Env,Scope,NewEnv) :-  
    eval_boolean(X,Env,Scope,NewEnv,false).

eval_command(t_command_for_range(t_word(X),Y,Z,T),Env,Scope,NewEnv) :- 
    lookup(X,Env,Val1),eval_expr(Y,Env,Scope,Val2,Env1), eval_expr(Z,Env1,Scope,Val3,Env2), 
    (between(Val2, Val3, Val1)-> eval_command(T,Env2,Scope,Env3), 
    lookup(X,Env3,Val4),Val5 is Val4 + 1, update(X,Val5,Scope,Env3,Env4),
    eval_command(t_command_for_range(t_word(X),Y,Z,T),Env4,Scope,NewEnv);
    writeln(2),NewEnv = Env).

eval_command(t_command_for_range(t_word(X),Y,Z,T),Env,Scope,NewEnv) :-
    \+lookup(X,Env,_Val1),eval_expr(Y,Env,Scope,Val2,Env1),update(X,Val2,Scope,Env1,Env2), 
    eval_expr(Z,Env2,Scope,_Val3,Env3), 
    eval_command(T,Env3,Scope,Env4), 
    eval_command(t_command_for_range(t_word(X),Y,Z,T),Env4,Scope,NewEnv),writeln(1).

eval_command(t_command_for(X,Y,Z,T), Env,Scope, NewEnv) :- 
    eval_command(X,Env,Scope,NewEnv1),
    eval_boolean(Y,NewEnv1,Scope,NewEnv2,true),
    eval_command(T,NewEnv2,Scope,NewEnv3),
    eval_expr(Z,NewEnv3,Scope,_Val,NewEnv4),
    eval_command(t_command_for(Y,Z,T),NewEnv4,Scope,NewEnv).

eval_command(t_command_for(Y,Z,T), Env,Scope, NewEnv) :- 
    eval_boolean(Y,Env,Scope,NewEnv2,true),
    eval_command(T,NewEnv2,Scope,NewEnv3),eval_expr(Z,NewEnv3,Scope,NewEnv4,_Val),
    eval_command(t_command_for(Y,Z,T),NewEnv4,Scope,NewEnv).

eval_command(t_command_for(X,Y,_Z,_T), Env,Scope, NewEnv) :- 
    eval_command(X,Env,Scope,NewEnv1), eval_boolean(Y,NewEnv1,Scope,NewEnv,false).  
eval_command(t_command_for(Y,_Z,_T), Env,Scope, NewEnv) :- 
    eval_boolean(Y,Env,Scope,NewEnv,false).

%eval_command(t_block(X,Y),Env,Scope,NewEnv):- eval_block(t_block(X,Y),Env,Scope,NewEnv).
%--------------------------------------------------------------------------------
:- table boolean/3.

boolean(t_b_true) --> [true].
boolean(t_b_false) --> [false].
boolean(t_b_not(X)) --> [not], boolean(X).
boolean(t_b_equals(X,Y)) --> expr(X), [=], [=], expr(Y).
boolean(t_b_not_equals(X,Y)) --> expr(X), [!], [=], expr(Y).
boolean(t_b_and(X,Y)) --> boolean(X),[and],boolean(Y).
boolean(t_b_or(X,Y)) --> boolean(X),[or],boolean(Y).
boolean(t_b_l(X,Y)) --> expr(X), [<], expr(Y).
boolean(t_b_g(X,Y)) --> expr(X), [>], expr(Y).
boolean(t_b_lte(X,Y)) --> expr(X), [<], [=], expr(Y).
boolean(t_b_gte(X,Y)) --> expr(X), [>], [=], expr(Y).

eval_boolean(t_b_true,Env,_Scope,Env,true).
eval_boolean(t_b_false,Env,_Scope,Env,false).
eval_boolean(t_b_not(X),Env,Scope,NewEnv,Condition) :- 
    eval_boolean(X,Env,Scope,NewEnv,Val1),not(Val1, Condition).

eval_boolean(t_b_equals(X,Y),Env,Scope,NewEnv,Condition) :- 
    eval_expr(X,Env,Scope,Val1,Env1), eval_expr(Y,Env1,Scope,Val2,NewEnv), 
    equal(Val1,Val2,Condition).

eval_boolean(t_b_not_equals(X,Y),Env,Scope,NewEnv,Condition) :- 
    eval_expr(X,Env,Scope,Val1,Env1), eval_expr(Y,Env1,Scope,Val2,NewEnv), 
    equal(Val1,Val2,C1), not(C1,Condition).

eval_boolean(t_b_and(X,Y),Env,Scope,NewEnv,Condition) :- 
    eval_boolean(X,Env,Scope,Env1,Val1), eval_boolean(Y,Env1,Scope,NewEnv,Val2), 
    andCond(Val1,Val2,Condition).


eval_boolean(t_b_or(X,Y),Env,Scope,NewEnv,Condition) :- 
    eval_boolean(X,Env,Scope,Env1,Val1), eval_boolean(Y,Env1,Scope,NewEnv,Val2), 
    orCond(Val1, Val2, Condition).

eval_boolean(t_b_l(X,Y),Env,Scope,NewEnv,Condition) :- 
    eval_expr(X,Env,Scope,Val1,Env1), eval_expr(Y,Env1,Scope,Val2,NewEnv), 
    lesser(Val1,Val2,Condition).
eval_boolean(t_b_g(X,Y),Env,Scope,NewEnv,Condtition) :- 
    eval_expr(X,Env,Scope,Val1,Env1), eval_expr(Y,Env1,Scope,Val2,NewEnv), 
    greater(Val1,Val2,Condtition).
eval_boolean(t_b_lte(X,Y),Env,Scope,NewEnv,Condtition) :- 
    eval_expr(X,Env,Scope,Val1,Env1), eval_expr(Y,Env1,Scope,Val2,NewEnv), 
    lesserEqual(Val1,Val2,Condtition).
eval_boolean(t_b_gte(X,Y),Env,Scope,NewEnv,Condtition) :- 
    eval_expr(X,Env,Scope,Val1,Env1), eval_expr(Y,Env1,Scope,Val2,NewEnv),
    greaterEqual(Val1,Val2,Condtition).


not(true, false).
not(false,true).

equal(Val1, Val2, true):- Val1 is Val2.
equal(Val1, Val2, false):- \+ Val1 is Val2.

andCond(Val1,Val2,true):- Val1 = true, Val2 = true.
andCond(Val1,Val2,false):- Val1 = false ; Val2 = false.

orCond(Val1,Val2, true):- Val1 = true; Val2 = true.
orCond(Val1,Val2, true):- Val1 = true; Val2 = false.
orCond(Val1,Val2, true):- Val1 = false; Val2 = true.
orCond(Val1,Val2, false):- Val1 = false, Val2 = false.

lesser(Val1,Val2,true):- Val1 < Val2.
lesser(Val1,Val2,false):- Val1 >= Val2.
greater(Val1,Val2,true):- Val1 > Val2.
greater(Val1,Val2,false):- Val1 =< Val2.

lesserEqual(Val1,Val2,true):- Val1 =< Val2.
lesserEqual(Val1,Val2,false):- Val1 > Val2.
greaterEqual(Val1,Val2,true):- Val1 >= Val2.
greaterEqual(Val1,Val2,false):- Val1 < Val2.

%--------------------------------------------------------------------------------
:- table expr/3, term/3.

assign(t_aAssign(I,Y)) --> word(I),[=], assign(Y).
assign(t_aInc(I)) --> word(I), [+], [+].
assign(t_aDec(I)) --> word(I), [-], [-].
assign(t_aAdd(I,X)) --> word(I), [+], [=], assign(X).
assign(t_aSub(I,X)) --> word(I), [-], [=], assign(X).
assign(t_aMult(I,X)) --> word(I), [*], [=], assign(X).
assign(t_aDiv(I,X)) --> word(I), [/], [=], assign(X).
assign(X) --> expr(X).

expr(t_add(X,Y)) --> expr(X),[+],term(Y).
expr(t_sub(X,Y)) --> expr(X),[-],term(Y).
expr(X) --> term(X).

term(t_mult(X,Y)) --> term(X),[*],number(Y).
term(t_div(X,Y)) --> term(X),[/],number(Y).
term(t_mod(X,Y)) --> term(X),['%'],number(Y).
term(X) --> paren(X).

paren(t_paren(X)) --> ['('], assign(X), [')'].
paren(X) --> number(X) | word(X).

% evaluate assignment statement
eval_expr(t_aAssign(t_word(I),Y), Env, Scope, Val, NewEnv) :-
    eval_expr(Y, Env, Scope,Val, Env1), update(I,Val,Scope,Env1,NewEnv).
    
eval_expr(t_paren(X), Env, Scope, Val, NewEnv) :- eval_expr(X,Env,Scope, Val,NewEnv).

eval_expr(t_aInc(t_word(I)), Env, Scope, Val, NewEnv) :-
    eval_expr(t_add(t_word(I),t_num(1)), Env, Scope, Val, Env1), 
    update(I,Val,Scope,Env1,NewEnv).

eval_expr(t_aDec(t_word(I)), Env, Scope, Val, NewEnv) :-
    eval_expr(t_sub(t_word(I),t_num(1)), Env, Scope, Val, Env1), 
    update(I,Val,Scope,Env1,NewEnv).

eval_expr(t_aAdd(t_word(I),Y), Env, Scope, Val, NewEnv) :-
    eval_expr(t_add(t_word(I),Y), Env, Scope, Val, Env1),
    update(I,Val,Scope,Env1,NewEnv).

eval_expr(t_aSub(t_word(I),Y), Env, Scope, Val, NewEnv) :-
    eval_expr(t_sub(t_word(I),Y), Env, Scope, Val, Env1), 
    update(I,Val,Scope,Env1,NewEnv).

eval_expr(t_aMult(t_word(I),Y), Env, Scope, Val, NewEnv) :-
    eval_expr(t_mult(t_word(I),Y), Env, Scope, Val, Env1),
    update(I,Val,Scope,Env1,NewEnv).

eval_expr(t_aDiv(t_word(I),Y), Env, Scope, Val, NewEnv) :-
    eval_expr(t_div(t_word(I),Y), Env, Scope, Val, Env1),
    update(I,Val,Scope,Env1,NewEnv).

% evaluate addition, subtraction, division, multiplication
eval_expr(t_add(X,Y), Env, Scope, Val, NewEnv):-
	eval_expr(X, Env, Scope, Val1, Env1), 
    eval_expr(Y, Env1, Scope, Val2, NewEnv), 
    Val is Val1 + Val2.
eval_expr(t_sub(X,Y), Env, Scope, Val, NewEnv):-
	eval_expr(X, Env, Scope, Val1, Env1),
    eval_expr(Y, Env1, Scope, Val2, NewEnv),
    Val is Val1 - Val2.
eval_expr(t_mult(X,Y), Env, Scope, Val, NewEnv):-
	eval_expr(X, Env, Scope, Val1, Env1),  
    eval_expr(Y, Env1, Scope, Val2, NewEnv), 
    Val is Val1 * Val2.
eval_expr(t_div(X,Y), Env, Scope, Val, NewEnv):-
	eval_expr(X, Env, Scope, Val1, Env1), 
    eval_expr(Y, Env1, Scope, Val2, NewEnv), 
    Val is Val1 / Val2.
eval_expr(t_mod(X,Y), Env, Scope, Val, NewEnv):-
	eval_expr(X, Env, Scope, Val1, Env1), 
    eval_expr(Y, Env1, Scope, Val2, NewEnv), 
    Val is Val1 mod Val2.

eval_expr(t_word(I), Env, _Scope, Val, Env):- lookup(I, Env, Val).
eval_expr(t_num(X), Env, _Scope, X, Env).

% look for the variable value in the environment
lookup(I, [(I,Val,_)|_], Val).
lookup(I, [_|T], Val) :- lookup(I, T, Val).

% update value of variable in the current environment
update(Id, Val, Scope, [], [(Id, Val, Scope)]).
update(Id, Val, Scope, [(Id,_,_)|T], [(Id,Val,Scope)|T]).
update(Id, Val, Scope, [H|T], [H|R]) :-
       H \= (Id,_,Scope), update(Id, Val, Scope,T,R).
update(Id, Val, Scope, [H|T], [(Id,Val)|R]) :-
       H == (Id,_,_), update(Id, Val, Scope,T,R).

%-------------------------------------------------------------------------

%--------------------------------------------------------------------------
string_quotes(t_string_q(X)) --> ['"'], string(X), ['"'] | 
    ['\''], string(X), ['\''].

string(t_string(X)) --> word(X).
string(t_string(X)) --> number(X).
string(t_string_space(Y)) --> [' '], string(Y). 
string(t_string(X,Y)) --> word(X), string(Y).
string(t_string(X,Y)) --> number(X), string(Y).
string(t_string_space) --> [' '].

keywords([+,-,>,<,=,while,for,if,elif,else]).
number(t_num(X)) --> [X],{number(X)}.
word(t_word(X)) --> [X],{atom(X),keywords(K),\+member(X,K)}.

